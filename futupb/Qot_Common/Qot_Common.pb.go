// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Qot_Common/Qot_Common.proto

package Qot_Common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "limgo/futupb/Common"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type QotMarket int32

const (
	QotMarket_QotMarket_Unknown       QotMarket = 0
	QotMarket_QotMarket_HK_Security   QotMarket = 1
	QotMarket_QotMarket_HK_Future     QotMarket = 2
	QotMarket_QotMarket_US_Security   QotMarket = 11
	QotMarket_QotMarket_US_Option     QotMarket = 12
	QotMarket_QotMarket_CNSH_Security QotMarket = 21
	QotMarket_QotMarket_CNSZ_Security QotMarket = 22
)

var QotMarket_name = map[int32]string{
	0:  "QotMarket_Unknown",
	1:  "QotMarket_HK_Security",
	2:  "QotMarket_HK_Future",
	11: "QotMarket_US_Security",
	12: "QotMarket_US_Option",
	21: "QotMarket_CNSH_Security",
	22: "QotMarket_CNSZ_Security",
}
var QotMarket_value = map[string]int32{
	"QotMarket_Unknown":       0,
	"QotMarket_HK_Security":   1,
	"QotMarket_HK_Future":     2,
	"QotMarket_US_Security":   11,
	"QotMarket_US_Option":     12,
	"QotMarket_CNSH_Security": 21,
	"QotMarket_CNSZ_Security": 22,
}

func (x QotMarket) Enum() *QotMarket {
	p := new(QotMarket)
	*p = x
	return p
}
func (x QotMarket) String() string {
	return proto.EnumName(QotMarket_name, int32(x))
}
func (x *QotMarket) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(QotMarket_value, data, "QotMarket")
	if err != nil {
		return err
	}
	*x = QotMarket(value)
	return nil
}
func (QotMarket) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Qot_Common_4f25757a2b43f61e, []int{0}
}

type SecurityType int32

const (
	SecurityType_SecurityType_Unknown  SecurityType = 0
	SecurityType_SecurityType_Bond     SecurityType = 1
	SecurityType_SecurityType_Bwrt     SecurityType = 2
	SecurityType_SecurityType_Eqty     SecurityType = 3
	SecurityType_SecurityType_Trust    SecurityType = 4
	SecurityType_SecurityType_Warrant  SecurityType = 5
	SecurityType_SecurityType_Index    SecurityType = 6
	SecurityType_SecurityType_Plate    SecurityType = 7
	SecurityType_SecurityType_Drvt     SecurityType = 8
	SecurityType_SecurityType_PlateSet SecurityType = 9
)

var SecurityType_name = map[int32]string{
	0: "SecurityType_Unknown",
	1: "SecurityType_Bond",
	2: "SecurityType_Bwrt",
	3: "SecurityType_Eqty",
	4: "SecurityType_Trust",
	5: "SecurityType_Warrant",
	6: "SecurityType_Index",
	7: "SecurityType_Plate",
	8: "SecurityType_Drvt",
	9: "SecurityType_PlateSet",
}
var SecurityType_value = map[string]int32{
	"SecurityType_Unknown":  0,
	"SecurityType_Bond":     1,
	"SecurityType_Bwrt":     2,
	"SecurityType_Eqty":     3,
	"SecurityType_Trust":    4,
	"SecurityType_Warrant":  5,
	"SecurityType_Index":    6,
	"SecurityType_Plate":    7,
	"SecurityType_Drvt":     8,
	"SecurityType_PlateSet": 9,
}

func (x SecurityType) Enum() *SecurityType {
	p := new(SecurityType)
	*p = x
	return p
}
func (x SecurityType) String() string {
	return proto.EnumName(SecurityType_name, int32(x))
}
func (x *SecurityType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SecurityType_value, data, "SecurityType")
	if err != nil {
		return err
	}
	*x = SecurityType(value)
	return nil
}
func (SecurityType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Qot_Common_4f25757a2b43f61e, []int{1}
}

type PlateSetType int32

const (
	PlateSetType_PlateSetType_All      PlateSetType = 0
	PlateSetType_PlateSetType_Industry PlateSetType = 1
	PlateSetType_PlateSetType_Region   PlateSetType = 2
	PlateSetType_PlateSetType_Concept  PlateSetType = 3
)

var PlateSetType_name = map[int32]string{
	0: "PlateSetType_All",
	1: "PlateSetType_Industry",
	2: "PlateSetType_Region",
	3: "PlateSetType_Concept",
}
var PlateSetType_value = map[string]int32{
	"PlateSetType_All":      0,
	"PlateSetType_Industry": 1,
	"PlateSetType_Region":   2,
	"PlateSetType_Concept":  3,
}

func (x PlateSetType) Enum() *PlateSetType {
	p := new(PlateSetType)
	*p = x
	return p
}
func (x PlateSetType) String() string {
	return proto.EnumName(PlateSetType_name, int32(x))
}
func (x *PlateSetType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PlateSetType_value, data, "PlateSetType")
	if err != nil {
		return err
	}
	*x = PlateSetType(value)
	return nil
}
func (PlateSetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Qot_Common_4f25757a2b43f61e, []int{2}
}

type WarrantType int32

const (
	WarrantType_WarrantType_Unknown WarrantType = 0
	WarrantType_WarrantType_Buy     WarrantType = 1
	WarrantType_WarrantType_Sell    WarrantType = 2
	WarrantType_WarrantType_Bull    WarrantType = 3
	WarrantType_WarrantType_Bear    WarrantType = 4
)

var WarrantType_name = map[int32]string{
	0: "WarrantType_Unknown",
	1: "WarrantType_Buy",
	2: "WarrantType_Sell",
	3: "WarrantType_Bull",
	4: "WarrantType_Bear",
}
var WarrantType_value = map[string]int32{
	"WarrantType_Unknown": 0,
	"WarrantType_Buy":     1,
	"WarrantType_Sell":    2,
	"WarrantType_Bull":    3,
	"WarrantType_Bear":    4,
}

func (x WarrantType) Enum() *WarrantType {
	p := new(WarrantType)
	*p = x
	return p
}
func (x WarrantType) String() string {
	return proto.EnumName(WarrantType_name, int32(x))
}
func (x *WarrantType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WarrantType_value, data, "WarrantType")
	if err != nil {
		return err
	}
	*x = WarrantType(value)
	return nil
}
func (WarrantType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Qot_Common_4f25757a2b43f61e, []int{3}
}

type QotMarketState int32

const (
	QotMarketState_QotMarketState_None                 QotMarketState = 0
	QotMarketState_QotMarketState_Auction              QotMarketState = 1
	QotMarketState_QotMarketState_WaitingOpen          QotMarketState = 2
	QotMarketState_QotMarketState_Morning              QotMarketState = 3
	QotMarketState_QotMarketState_Rest                 QotMarketState = 4
	QotMarketState_QotMarketState_Afternoon            QotMarketState = 5
	QotMarketState_QotMarketState_Closed               QotMarketState = 6
	QotMarketState_QotMarketState_PreMarketBegin       QotMarketState = 8
	QotMarketState_QotMarketState_PreMarketEnd         QotMarketState = 9
	QotMarketState_QotMarketState_AfterHoursBegin      QotMarketState = 10
	QotMarketState_QotMarketState_AfterHoursEnd        QotMarketState = 11
	QotMarketState_QotMarketState_NightOpen            QotMarketState = 13
	QotMarketState_QotMarketState_NightEnd             QotMarketState = 14
	QotMarketState_QotMarketState_FutureDayOpen        QotMarketState = 15
	QotMarketState_QotMarketState_FutureDayBreak       QotMarketState = 16
	QotMarketState_QotMarketState_FutureDayClose       QotMarketState = 17
	QotMarketState_QotMarketState_FutureDayWaitForOpen QotMarketState = 18
	QotMarketState_QotMarketState_HkCas                QotMarketState = 19
)

var QotMarketState_name = map[int32]string{
	0:  "QotMarketState_None",
	1:  "QotMarketState_Auction",
	2:  "QotMarketState_WaitingOpen",
	3:  "QotMarketState_Morning",
	4:  "QotMarketState_Rest",
	5:  "QotMarketState_Afternoon",
	6:  "QotMarketState_Closed",
	8:  "QotMarketState_PreMarketBegin",
	9:  "QotMarketState_PreMarketEnd",
	10: "QotMarketState_AfterHoursBegin",
	11: "QotMarketState_AfterHoursEnd",
	13: "QotMarketState_NightOpen",
	14: "QotMarketState_NightEnd",
	15: "QotMarketState_FutureDayOpen",
	16: "QotMarketState_FutureDayBreak",
	17: "QotMarketState_FutureDayClose",
	18: "QotMarketState_FutureDayWaitForOpen",
	19: "QotMarketState_HkCas",
}
var QotMarketState_value = map[string]int32{
	"QotMarketState_None":                 0,
	"QotMarketState_Auction":              1,
	"QotMarketState_WaitingOpen":          2,
	"QotMarketState_Morning":              3,
	"QotMarketState_Rest":                 4,
	"QotMarketState_Afternoon":            5,
	"QotMarketState_Closed":               6,
	"QotMarketState_PreMarketBegin":       8,
	"QotMarketState_PreMarketEnd":         9,
	"QotMarketState_AfterHoursBegin":      10,
	"QotMarketState_AfterHoursEnd":        11,
	"QotMarketState_NightOpen":            13,
	"QotMarketState_NightEnd":             14,
	"QotMarketState_FutureDayOpen":        15,
	"QotMarketState_FutureDayBreak":       16,
	"QotMarketState_FutureDayClose":       17,
	"QotMarketState_FutureDayWaitForOpen": 18,
	"QotMarketState_HkCas":                19,
}

func (x QotMarketState) Enum() *QotMarketState {
	p := new(QotMarketState)
	*p = x
	return p
}
func (x QotMarketState) String() string {
	return proto.EnumName(QotMarketState_name, int32(x))
}
func (x *QotMarketState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(QotMarketState_value, data, "QotMarketState")
	if err != nil {
		return err
	}
	*x = QotMarketState(value)
	return nil
}
func (QotMarketState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Qot_Common_4f25757a2b43f61e, []int{4}
}

type RehabType int32

const (
	RehabType_RehabType_None     RehabType = 0
	RehabType_RehabType_Forward  RehabType = 1
	RehabType_RehabType_Backward RehabType = 2
)

var RehabType_name = map[int32]string{
	0: "RehabType_None",
	1: "RehabType_Forward",
	2: "RehabType_Backward",
}
var RehabType_value = map[string]int32{
	"RehabType_None":     0,
	"RehabType_Forward":  1,
	"RehabType_Backward": 2,
}

func (x RehabType) Enum() *RehabType {
	p := new(RehabType)
	*p = x
	return p
}
func (x RehabType) String() string {
	return proto.EnumName(RehabType_name, int32(x))
}
func (x *RehabType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RehabType_value, data, "RehabType")
	if err != nil {
		return err
	}
	*x = RehabType(value)
	return nil
}
func (RehabType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Qot_Common_4f25757a2b43f61e, []int{5}
}

// 枚举值兼容旧协议定义
// 新类型季K,年K,3分K暂时没有支持历史K线
type KLType int32

const (
	KLType_KLType_Unknown KLType = 0
	KLType_KLType_1Min    KLType = 1
	KLType_KLType_Day     KLType = 2
	KLType_KLType_Week    KLType = 3
	KLType_KLType_Month   KLType = 4
	KLType_KLType_Year    KLType = 5
	KLType_KLType_5Min    KLType = 6
	KLType_KLType_15Min   KLType = 7
	KLType_KLType_30Min   KLType = 8
	KLType_KLType_60Min   KLType = 9
	KLType_KLType_3Min    KLType = 10
	KLType_KLType_Quarter KLType = 11
)

var KLType_name = map[int32]string{
	0:  "KLType_Unknown",
	1:  "KLType_1Min",
	2:  "KLType_Day",
	3:  "KLType_Week",
	4:  "KLType_Month",
	5:  "KLType_Year",
	6:  "KLType_5Min",
	7:  "KLType_15Min",
	8:  "KLType_30Min",
	9:  "KLType_60Min",
	10: "KLType_3Min",
	11: "KLType_Quarter",
}
var KLType_value = map[string]int32{
	"KLType_Unknown": 0,
	"KLType_1Min":    1,
	"KLType_Day":     2,
	"KLType_Week":    3,
	"KLType_Month":   4,
	"KLType_Year":    5,
	"KLType_5Min":    6,
	"KLType_15Min":   7,
	"KLType_30Min":   8,
	"KLType_60Min":   9,
	"KLType_3Min":    10,
	"KLType_Quarter": 11,
}

func (x KLType) Enum() *KLType {
	p := new(KLType)
	*p = x
	return p
}
func (x KLType) String() string {
	return proto.EnumName(KLType_name, int32(x))
}
func (x *KLType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(KLType_value, data, "KLType")
	if err != nil {
		return err
	}
	*x = KLType(value)
	return nil
}
func (KLType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Qot_Common_4f25757a2b43f61e, []int{6}
}

type KLFields int32

const (
	KLFields_KLFields_None         KLFields = 0
	KLFields_KLFields_High         KLFields = 1
	KLFields_KLFields_Open         KLFields = 2
	KLFields_KLFields_Low          KLFields = 4
	KLFields_KLFields_Close        KLFields = 8
	KLFields_KLFields_LastClose    KLFields = 16
	KLFields_KLFields_Volume       KLFields = 32
	KLFields_KLFields_Turnover     KLFields = 64
	KLFields_KLFields_TurnoverRate KLFields = 128
	KLFields_KLFields_PE           KLFields = 256
	KLFields_KLFields_ChangeRate   KLFields = 512
)

var KLFields_name = map[int32]string{
	0:   "KLFields_None",
	1:   "KLFields_High",
	2:   "KLFields_Open",
	4:   "KLFields_Low",
	8:   "KLFields_Close",
	16:  "KLFields_LastClose",
	32:  "KLFields_Volume",
	64:  "KLFields_Turnover",
	128: "KLFields_TurnoverRate",
	256: "KLFields_PE",
	512: "KLFields_ChangeRate",
}
var KLFields_value = map[string]int32{
	"KLFields_None":         0,
	"KLFields_High":         1,
	"KLFields_Open":         2,
	"KLFields_Low":          4,
	"KLFields_Close":        8,
	"KLFields_LastClose":    16,
	"KLFields_Volume":       32,
	"KLFields_Turnover":     64,
	"KLFields_TurnoverRate": 128,
	"KLFields_PE":           256,
	"KLFields_ChangeRate":   512,
}

func (x KLFields) Enum() *KLFields {
	p := new(KLFields)
	*p = x
	return p
}
func (x KLFields) String() string {
	return proto.EnumName(KLFields_name, int32(x))
}
func (x *KLFields) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(KLFields_value, data, "KLFields")
	if err != nil {
		return err
	}
	*x = KLFields(value)
	return nil
}
func (KLFields) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Qot_Common_4f25757a2b43f61e, []int{7}
}

// 订阅类型
// 枚举值兼容旧协议定义
type SubType int32

const (
	SubType_SubType_None       SubType = 0
	SubType_SubType_Basic      SubType = 1
	SubType_SubType_OrderBook  SubType = 2
	SubType_SubType_Ticker     SubType = 4
	SubType_SubType_RT         SubType = 5
	SubType_SubType_KL_Day     SubType = 6
	SubType_SubType_KL_5Min    SubType = 7
	SubType_SubType_KL_15Min   SubType = 8
	SubType_SubType_KL_30Min   SubType = 9
	SubType_SubType_KL_60Min   SubType = 10
	SubType_SubType_KL_1Min    SubType = 11
	SubType_SubType_KL_Week    SubType = 12
	SubType_SubType_KL_Month   SubType = 13
	SubType_SubType_Broker     SubType = 14
	SubType_SubType_KL_Qurater SubType = 15
	SubType_SubType_KL_Year    SubType = 16
	SubType_SubType_KL_3Min    SubType = 17
)

var SubType_name = map[int32]string{
	0:  "SubType_None",
	1:  "SubType_Basic",
	2:  "SubType_OrderBook",
	4:  "SubType_Ticker",
	5:  "SubType_RT",
	6:  "SubType_KL_Day",
	7:  "SubType_KL_5Min",
	8:  "SubType_KL_15Min",
	9:  "SubType_KL_30Min",
	10: "SubType_KL_60Min",
	11: "SubType_KL_1Min",
	12: "SubType_KL_Week",
	13: "SubType_KL_Month",
	14: "SubType_Broker",
	15: "SubType_KL_Qurater",
	16: "SubType_KL_Year",
	17: "SubType_KL_3Min",
}
var SubType_value = map[string]int32{
	"SubType_None":       0,
	"SubType_Basic":      1,
	"SubType_OrderBook":  2,
	"SubType_Ticker":     4,
	"SubType_RT":         5,
	"SubType_KL_Day":     6,
	"SubType_KL_5Min":    7,
	"SubType_KL_15Min":   8,
	"SubType_KL_30Min":   9,
	"SubType_KL_60Min":   10,
	"SubType_KL_1Min":    11,
	"SubType_KL_Week":    12,
	"SubType_KL_Month":   13,
	"SubType_Broker":     14,
	"SubType_KL_Qurater": 15,
	"SubType_KL_Year":    16,
	"SubType_KL_3Min":    17,
}

func (x SubType) Enum() *SubType {
	p := new(SubType)
	*p = x
	return p
}
func (x SubType) String() string {
	return proto.EnumName(SubType_name, int32(x))
}
func (x *SubType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SubType_value, data, "SubType")
	if err != nil {
		return err
	}
	*x = SubType(value)
	return nil
}
func (SubType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Qot_Common_4f25757a2b43f61e, []int{8}
}

type TickerDirection int32

const (
	TickerDirection_TickerDirection_Unknown TickerDirection = 0
	TickerDirection_TickerDirection_Bid     TickerDirection = 1
	TickerDirection_TickerDirection_Ask     TickerDirection = 2
	TickerDirection_TickerDirection_Neutral TickerDirection = 3
)

var TickerDirection_name = map[int32]string{
	0: "TickerDirection_Unknown",
	1: "TickerDirection_Bid",
	2: "TickerDirection_Ask",
	3: "TickerDirection_Neutral",
}
var TickerDirection_value = map[string]int32{
	"TickerDirection_Unknown": 0,
	"TickerDirection_Bid":     1,
	"TickerDirection_Ask":     2,
	"TickerDirection_Neutral": 3,
}

func (x TickerDirection) Enum() *TickerDirection {
	p := new(TickerDirection)
	*p = x
	return p
}
func (x TickerDirection) String() string {
	return proto.EnumName(TickerDirection_name, int32(x))
}
func (x *TickerDirection) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TickerDirection_value, data, "TickerDirection")
	if err != nil {
		return err
	}
	*x = TickerDirection(value)
	return nil
}
func (TickerDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Qot_Common_4f25757a2b43f61e, []int{9}
}

type TickerType int32

const (
	TickerType_TickerType_Unknown                 TickerType = 0
	TickerType_TickerType_Automatch               TickerType = 1
	TickerType_TickerType_Late                    TickerType = 2
	TickerType_TickerType_NoneAutomatch           TickerType = 3
	TickerType_TickerType_InterAutomatch          TickerType = 4
	TickerType_TickerType_InterNoneAutomatch      TickerType = 5
	TickerType_TickerType_OddLot                  TickerType = 6
	TickerType_TickerType_Auction                 TickerType = 7
	TickerType_TickerType_Bulk                    TickerType = 8
	TickerType_TickerType_Crash                   TickerType = 9
	TickerType_TickerType_CrossMarket             TickerType = 10
	TickerType_TickerType_BulkSold                TickerType = 11
	TickerType_TickerType_FreeOnBoard             TickerType = 12
	TickerType_TickerType_Rule127Or155            TickerType = 13
	TickerType_TickerType_Delay                   TickerType = 14
	TickerType_TickerType_MarketCenterClosePrice  TickerType = 15
	TickerType_TickerType_NextDay                 TickerType = 16
	TickerType_TickerType_MarketCenterOpening     TickerType = 17
	TickerType_TickerType_PriorReferencePrice     TickerType = 18
	TickerType_TickerType_MarketCenterOpenPrice   TickerType = 19
	TickerType_TickerType_Seller                  TickerType = 20
	TickerType_TickerType_T                       TickerType = 21
	TickerType_TickerType_ExtendedTradingHours    TickerType = 22
	TickerType_TickerType_Contingent              TickerType = 23
	TickerType_TickerType_AveragePrice            TickerType = 24
	TickerType_TickerType_OTCSold                 TickerType = 25
	TickerType_TickerType_OddLotCrossMarket       TickerType = 26
	TickerType_TickerType_DerivativelyPriced      TickerType = 27
	TickerType_TickerType_ReOpeningPriced         TickerType = 28
	TickerType_TickerType_ClosingPriced           TickerType = 29
	TickerType_TickerType_ComprehensiveDelayPrice TickerType = 30
)

var TickerType_name = map[int32]string{
	0:  "TickerType_Unknown",
	1:  "TickerType_Automatch",
	2:  "TickerType_Late",
	3:  "TickerType_NoneAutomatch",
	4:  "TickerType_InterAutomatch",
	5:  "TickerType_InterNoneAutomatch",
	6:  "TickerType_OddLot",
	7:  "TickerType_Auction",
	8:  "TickerType_Bulk",
	9:  "TickerType_Crash",
	10: "TickerType_CrossMarket",
	11: "TickerType_BulkSold",
	12: "TickerType_FreeOnBoard",
	13: "TickerType_Rule127Or155",
	14: "TickerType_Delay",
	15: "TickerType_MarketCenterClosePrice",
	16: "TickerType_NextDay",
	17: "TickerType_MarketCenterOpening",
	18: "TickerType_PriorReferencePrice",
	19: "TickerType_MarketCenterOpenPrice",
	20: "TickerType_Seller",
	21: "TickerType_T",
	22: "TickerType_ExtendedTradingHours",
	23: "TickerType_Contingent",
	24: "TickerType_AveragePrice",
	25: "TickerType_OTCSold",
	26: "TickerType_OddLotCrossMarket",
	27: "TickerType_DerivativelyPriced",
	28: "TickerType_ReOpeningPriced",
	29: "TickerType_ClosingPriced",
	30: "TickerType_ComprehensiveDelayPrice",
}
var TickerType_value = map[string]int32{
	"TickerType_Unknown":                 0,
	"TickerType_Automatch":               1,
	"TickerType_Late":                    2,
	"TickerType_NoneAutomatch":           3,
	"TickerType_InterAutomatch":          4,
	"TickerType_InterNoneAutomatch":      5,
	"TickerType_OddLot":                  6,
	"TickerType_Auction":                 7,
	"TickerType_Bulk":                    8,
	"TickerType_Crash":                   9,
	"TickerType_CrossMarket":             10,
	"TickerType_BulkSold":                11,
	"TickerType_FreeOnBoard":             12,
	"TickerType_Rule127Or155":            13,
	"TickerType_Delay":                   14,
	"TickerType_MarketCenterClosePrice":  15,
	"TickerType_NextDay":                 16,
	"TickerType_MarketCenterOpening":     17,
	"TickerType_PriorReferencePrice":     18,
	"TickerType_MarketCenterOpenPrice":   19,
	"TickerType_Seller":                  20,
	"TickerType_T":                       21,
	"TickerType_ExtendedTradingHours":    22,
	"TickerType_Contingent":              23,
	"TickerType_AveragePrice":            24,
	"TickerType_OTCSold":                 25,
	"TickerType_OddLotCrossMarket":       26,
	"TickerType_DerivativelyPriced":      27,
	"TickerType_ReOpeningPriced":         28,
	"TickerType_ClosingPriced":           29,
	"TickerType_ComprehensiveDelayPrice": 30,
}

func (x TickerType) Enum() *TickerType {
	p := new(TickerType)
	*p = x
	return p
}
func (x TickerType) String() string {
	return proto.EnumName(TickerType_name, int32(x))
}
func (x *TickerType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TickerType_value, data, "TickerType")
	if err != nil {
		return err
	}
	*x = TickerType(value)
	return nil
}
func (TickerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Qot_Common_4f25757a2b43f61e, []int{10}
}

type DarkStatus int32

const (
	DarkStatus_DarkStatus_None    DarkStatus = 0
	DarkStatus_DarkStatus_Trading DarkStatus = 1
	DarkStatus_DarkStatus_End     DarkStatus = 2
)

var DarkStatus_name = map[int32]string{
	0: "DarkStatus_None",
	1: "DarkStatus_Trading",
	2: "DarkStatus_End",
}
var DarkStatus_value = map[string]int32{
	"DarkStatus_None":    0,
	"DarkStatus_Trading": 1,
	"DarkStatus_End":     2,
}

func (x DarkStatus) Enum() *DarkStatus {
	p := new(DarkStatus)
	*p = x
	return p
}
func (x DarkStatus) String() string {
	return proto.EnumName(DarkStatus_name, int32(x))
}
func (x *DarkStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DarkStatus_value, data, "DarkStatus")
	if err != nil {
		return err
	}
	*x = DarkStatus(value)
	return nil
}
func (DarkStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Qot_Common_4f25757a2b43f61e, []int{11}
}

// 两个字段确定一支股票
type Security struct {
	Market               *int32   `protobuf:"varint,1,req,name=market" json:"market,omitempty"`
	Code                 *string  `protobuf:"bytes,2,req,name=code" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Security) Reset()         { *m = Security{} }
func (m *Security) String() string { return proto.CompactTextString(m) }
func (*Security) ProtoMessage()    {}
func (*Security) Descriptor() ([]byte, []int) {
	return fileDescriptor_Qot_Common_4f25757a2b43f61e, []int{0}
}
func (m *Security) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Security.Unmarshal(m, b)
}
func (m *Security) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Security.Marshal(b, m, deterministic)
}
func (dst *Security) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Security.Merge(dst, src)
}
func (m *Security) XXX_Size() int {
	return xxx_messageInfo_Security.Size(m)
}
func (m *Security) XXX_DiscardUnknown() {
	xxx_messageInfo_Security.DiscardUnknown(m)
}

var xxx_messageInfo_Security proto.InternalMessageInfo

func (m *Security) GetMarket() int32 {
	if m != nil && m.Market != nil {
		return *m.Market
	}
	return 0
}

func (m *Security) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

type KLine struct {
	Time                 *string  `protobuf:"bytes,1,req,name=time" json:"time,omitempty"`
	IsBlank              *bool    `protobuf:"varint,2,req,name=isBlank" json:"isBlank,omitempty"`
	HighPrice            *float64 `protobuf:"fixed64,3,opt,name=highPrice" json:"highPrice,omitempty"`
	OpenPrice            *float64 `protobuf:"fixed64,4,opt,name=openPrice" json:"openPrice,omitempty"`
	LowPrice             *float64 `protobuf:"fixed64,5,opt,name=lowPrice" json:"lowPrice,omitempty"`
	ClosePrice           *float64 `protobuf:"fixed64,6,opt,name=closePrice" json:"closePrice,omitempty"`
	LastClosePrice       *float64 `protobuf:"fixed64,7,opt,name=lastClosePrice" json:"lastClosePrice,omitempty"`
	Volume               *int64   `protobuf:"varint,8,opt,name=volume" json:"volume,omitempty"`
	Turnover             *float64 `protobuf:"fixed64,9,opt,name=turnover" json:"turnover,omitempty"`
	TurnoverRate         *float64 `protobuf:"fixed64,10,opt,name=turnoverRate" json:"turnoverRate,omitempty"`
	Pe                   *float64 `protobuf:"fixed64,11,opt,name=pe" json:"pe,omitempty"`
	ChangeRate           *float64 `protobuf:"fixed64,12,opt,name=changeRate" json:"changeRate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KLine) Reset()         { *m = KLine{} }
func (m *KLine) String() string { return proto.CompactTextString(m) }
func (*KLine) ProtoMessage()    {}
func (*KLine) Descriptor() ([]byte, []int) {
	return fileDescriptor_Qot_Common_4f25757a2b43f61e, []int{1}
}
func (m *KLine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KLine.Unmarshal(m, b)
}
func (m *KLine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KLine.Marshal(b, m, deterministic)
}
func (dst *KLine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KLine.Merge(dst, src)
}
func (m *KLine) XXX_Size() int {
	return xxx_messageInfo_KLine.Size(m)
}
func (m *KLine) XXX_DiscardUnknown() {
	xxx_messageInfo_KLine.DiscardUnknown(m)
}

var xxx_messageInfo_KLine proto.InternalMessageInfo

func (m *KLine) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *KLine) GetIsBlank() bool {
	if m != nil && m.IsBlank != nil {
		return *m.IsBlank
	}
	return false
}

func (m *KLine) GetHighPrice() float64 {
	if m != nil && m.HighPrice != nil {
		return *m.HighPrice
	}
	return 0
}

func (m *KLine) GetOpenPrice() float64 {
	if m != nil && m.OpenPrice != nil {
		return *m.OpenPrice
	}
	return 0
}

func (m *KLine) GetLowPrice() float64 {
	if m != nil && m.LowPrice != nil {
		return *m.LowPrice
	}
	return 0
}

func (m *KLine) GetClosePrice() float64 {
	if m != nil && m.ClosePrice != nil {
		return *m.ClosePrice
	}
	return 0
}

func (m *KLine) GetLastClosePrice() float64 {
	if m != nil && m.LastClosePrice != nil {
		return *m.LastClosePrice
	}
	return 0
}

func (m *KLine) GetVolume() int64 {
	if m != nil && m.Volume != nil {
		return *m.Volume
	}
	return 0
}

func (m *KLine) GetTurnover() float64 {
	if m != nil && m.Turnover != nil {
		return *m.Turnover
	}
	return 0
}

func (m *KLine) GetTurnoverRate() float64 {
	if m != nil && m.TurnoverRate != nil {
		return *m.TurnoverRate
	}
	return 0
}

func (m *KLine) GetPe() float64 {
	if m != nil && m.Pe != nil {
		return *m.Pe
	}
	return 0
}

func (m *KLine) GetChangeRate() float64 {
	if m != nil && m.ChangeRate != nil {
		return *m.ChangeRate
	}
	return 0
}

type BasicQot struct {
	Security             *Security `protobuf:"bytes,1,req,name=security" json:"security,omitempty"`
	IsSuspended          *bool     `protobuf:"varint,2,req,name=isSuspended" json:"isSuspended,omitempty"`
	ListTime             *string   `protobuf:"bytes,3,req,name=listTime" json:"listTime,omitempty"`
	PriceSpread          *float64  `protobuf:"fixed64,4,req,name=priceSpread" json:"priceSpread,omitempty"`
	UpdateTime           *string   `protobuf:"bytes,5,req,name=updateTime" json:"updateTime,omitempty"`
	HighPrice            *float64  `protobuf:"fixed64,6,req,name=highPrice" json:"highPrice,omitempty"`
	OpenPrice            *float64  `protobuf:"fixed64,7,req,name=openPrice" json:"openPrice,omitempty"`
	LowPrice             *float64  `protobuf:"fixed64,8,req,name=lowPrice" json:"lowPrice,omitempty"`
	CurPrice             *float64  `protobuf:"fixed64,9,req,name=curPrice" json:"curPrice,omitempty"`
	LastClosePrice       *float64  `protobuf:"fixed64,10,req,name=lastClosePrice" json:"lastClosePrice,omitempty"`
	Volume               *int64    `protobuf:"varint,11,req,name=volume" json:"volume,omitempty"`
	Turnover             *float64  `protobuf:"fixed64,12,req,name=turnover" json:"turnover,omitempty"`
	TurnoverRate         *float64  `protobuf:"fixed64,13,req,name=turnoverRate" json:"turnoverRate,omitempty"`
	Amplitude            *float64  `protobuf:"fixed64,14,req,name=amplitude" json:"amplitude,omitempty"`
	DarkStatus           *int32    `protobuf:"varint,15,opt,name=darkStatus" json:"darkStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *BasicQot) Reset()         { *m = BasicQot{} }
func (m *BasicQot) String() string { return proto.CompactTextString(m) }
func (*BasicQot) ProtoMessage()    {}
func (*BasicQot) Descriptor() ([]byte, []int) {
	return fileDescriptor_Qot_Common_4f25757a2b43f61e, []int{2}
}
func (m *BasicQot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BasicQot.Unmarshal(m, b)
}
func (m *BasicQot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BasicQot.Marshal(b, m, deterministic)
}
func (dst *BasicQot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicQot.Merge(dst, src)
}
func (m *BasicQot) XXX_Size() int {
	return xxx_messageInfo_BasicQot.Size(m)
}
func (m *BasicQot) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicQot.DiscardUnknown(m)
}

var xxx_messageInfo_BasicQot proto.InternalMessageInfo

func (m *BasicQot) GetSecurity() *Security {
	if m != nil {
		return m.Security
	}
	return nil
}

func (m *BasicQot) GetIsSuspended() bool {
	if m != nil && m.IsSuspended != nil {
		return *m.IsSuspended
	}
	return false
}

func (m *BasicQot) GetListTime() string {
	if m != nil && m.ListTime != nil {
		return *m.ListTime
	}
	return ""
}

func (m *BasicQot) GetPriceSpread() float64 {
	if m != nil && m.PriceSpread != nil {
		return *m.PriceSpread
	}
	return 0
}

func (m *BasicQot) GetUpdateTime() string {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return ""
}

func (m *BasicQot) GetHighPrice() float64 {
	if m != nil && m.HighPrice != nil {
		return *m.HighPrice
	}
	return 0
}

func (m *BasicQot) GetOpenPrice() float64 {
	if m != nil && m.OpenPrice != nil {
		return *m.OpenPrice
	}
	return 0
}

func (m *BasicQot) GetLowPrice() float64 {
	if m != nil && m.LowPrice != nil {
		return *m.LowPrice
	}
	return 0
}

func (m *BasicQot) GetCurPrice() float64 {
	if m != nil && m.CurPrice != nil {
		return *m.CurPrice
	}
	return 0
}

func (m *BasicQot) GetLastClosePrice() float64 {
	if m != nil && m.LastClosePrice != nil {
		return *m.LastClosePrice
	}
	return 0
}

func (m *BasicQot) GetVolume() int64 {
	if m != nil && m.Volume != nil {
		return *m.Volume
	}
	return 0
}

func (m *BasicQot) GetTurnover() float64 {
	if m != nil && m.Turnover != nil {
		return *m.Turnover
	}
	return 0
}

func (m *BasicQot) GetTurnoverRate() float64 {
	if m != nil && m.TurnoverRate != nil {
		return *m.TurnoverRate
	}
	return 0
}

func (m *BasicQot) GetAmplitude() float64 {
	if m != nil && m.Amplitude != nil {
		return *m.Amplitude
	}
	return 0
}

func (m *BasicQot) GetDarkStatus() int32 {
	if m != nil && m.DarkStatus != nil {
		return *m.DarkStatus
	}
	return 0
}

type TimeShare struct {
	Time                 *string  `protobuf:"bytes,1,req,name=time" json:"time,omitempty"`
	Minute               *int32   `protobuf:"varint,2,req,name=minute" json:"minute,omitempty"`
	IsBlank              *bool    `protobuf:"varint,3,req,name=isBlank" json:"isBlank,omitempty"`
	Price                *float64 `protobuf:"fixed64,4,opt,name=price" json:"price,omitempty"`
	LastClosePrice       *float64 `protobuf:"fixed64,5,opt,name=lastClosePrice" json:"lastClosePrice,omitempty"`
	AvgPrice             *float64 `protobuf:"fixed64,6,opt,name=avgPrice" json:"avgPrice,omitempty"`
	Volume               *int64   `protobuf:"varint,7,opt,name=volume" json:"volume,omitempty"`
	Turnover             *float64 `protobuf:"fixed64,8,opt,name=turnover" json:"turnover,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeShare) Reset()         { *m = TimeShare{} }
func (m *TimeShare) String() string { return proto.CompactTextString(m) }
func (*TimeShare) ProtoMessage()    {}
func (*TimeShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_Qot_Common_4f25757a2b43f61e, []int{3}
}
func (m *TimeShare) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeShare.Unmarshal(m, b)
}
func (m *TimeShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeShare.Marshal(b, m, deterministic)
}
func (dst *TimeShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeShare.Merge(dst, src)
}
func (m *TimeShare) XXX_Size() int {
	return xxx_messageInfo_TimeShare.Size(m)
}
func (m *TimeShare) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeShare.DiscardUnknown(m)
}

var xxx_messageInfo_TimeShare proto.InternalMessageInfo

func (m *TimeShare) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *TimeShare) GetMinute() int32 {
	if m != nil && m.Minute != nil {
		return *m.Minute
	}
	return 0
}

func (m *TimeShare) GetIsBlank() bool {
	if m != nil && m.IsBlank != nil {
		return *m.IsBlank
	}
	return false
}

func (m *TimeShare) GetPrice() float64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *TimeShare) GetLastClosePrice() float64 {
	if m != nil && m.LastClosePrice != nil {
		return *m.LastClosePrice
	}
	return 0
}

func (m *TimeShare) GetAvgPrice() float64 {
	if m != nil && m.AvgPrice != nil {
		return *m.AvgPrice
	}
	return 0
}

func (m *TimeShare) GetVolume() int64 {
	if m != nil && m.Volume != nil {
		return *m.Volume
	}
	return 0
}

func (m *TimeShare) GetTurnover() float64 {
	if m != nil && m.Turnover != nil {
		return *m.Turnover
	}
	return 0
}

type SecurityStaticBasic struct {
	Security             *Security `protobuf:"bytes,1,req,name=security" json:"security,omitempty"`
	Id                   *int64    `protobuf:"varint,2,req,name=id" json:"id,omitempty"`
	LotSize              *int32    `protobuf:"varint,3,req,name=lotSize" json:"lotSize,omitempty"`
	SecType              *int32    `protobuf:"varint,4,req,name=secType" json:"secType,omitempty"`
	Name                 *string   `protobuf:"bytes,5,req,name=name" json:"name,omitempty"`
	ListTime             *string   `protobuf:"bytes,6,req,name=listTime" json:"listTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SecurityStaticBasic) Reset()         { *m = SecurityStaticBasic{} }
func (m *SecurityStaticBasic) String() string { return proto.CompactTextString(m) }
func (*SecurityStaticBasic) ProtoMessage()    {}
func (*SecurityStaticBasic) Descriptor() ([]byte, []int) {
	return fileDescriptor_Qot_Common_4f25757a2b43f61e, []int{4}
}
func (m *SecurityStaticBasic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecurityStaticBasic.Unmarshal(m, b)
}
func (m *SecurityStaticBasic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecurityStaticBasic.Marshal(b, m, deterministic)
}
func (dst *SecurityStaticBasic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityStaticBasic.Merge(dst, src)
}
func (m *SecurityStaticBasic) XXX_Size() int {
	return xxx_messageInfo_SecurityStaticBasic.Size(m)
}
func (m *SecurityStaticBasic) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityStaticBasic.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityStaticBasic proto.InternalMessageInfo

func (m *SecurityStaticBasic) GetSecurity() *Security {
	if m != nil {
		return m.Security
	}
	return nil
}

func (m *SecurityStaticBasic) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SecurityStaticBasic) GetLotSize() int32 {
	if m != nil && m.LotSize != nil {
		return *m.LotSize
	}
	return 0
}

func (m *SecurityStaticBasic) GetSecType() int32 {
	if m != nil && m.SecType != nil {
		return *m.SecType
	}
	return 0
}

func (m *SecurityStaticBasic) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SecurityStaticBasic) GetListTime() string {
	if m != nil && m.ListTime != nil {
		return *m.ListTime
	}
	return ""
}

type WarrantStaticExData struct {
	Type                 *int32    `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	Owner                *Security `protobuf:"bytes,2,req,name=owner" json:"owner,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *WarrantStaticExData) Reset()         { *m = WarrantStaticExData{} }
func (m *WarrantStaticExData) String() string { return proto.CompactTextString(m) }
func (*WarrantStaticExData) ProtoMessage()    {}
func (*WarrantStaticExData) Descriptor() ([]byte, []int) {
	return fileDescriptor_Qot_Common_4f25757a2b43f61e, []int{5}
}
func (m *WarrantStaticExData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WarrantStaticExData.Unmarshal(m, b)
}
func (m *WarrantStaticExData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WarrantStaticExData.Marshal(b, m, deterministic)
}
func (dst *WarrantStaticExData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WarrantStaticExData.Merge(dst, src)
}
func (m *WarrantStaticExData) XXX_Size() int {
	return xxx_messageInfo_WarrantStaticExData.Size(m)
}
func (m *WarrantStaticExData) XXX_DiscardUnknown() {
	xxx_messageInfo_WarrantStaticExData.DiscardUnknown(m)
}

var xxx_messageInfo_WarrantStaticExData proto.InternalMessageInfo

func (m *WarrantStaticExData) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *WarrantStaticExData) GetOwner() *Security {
	if m != nil {
		return m.Owner
	}
	return nil
}

type SecurityStaticInfo struct {
	Basic                *SecurityStaticBasic `protobuf:"bytes,1,req,name=basic" json:"basic,omitempty"`
	WarrantExData        *WarrantStaticExData `protobuf:"bytes,2,opt,name=warrantExData" json:"warrantExData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SecurityStaticInfo) Reset()         { *m = SecurityStaticInfo{} }
func (m *SecurityStaticInfo) String() string { return proto.CompactTextString(m) }
func (*SecurityStaticInfo) ProtoMessage()    {}
func (*SecurityStaticInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_Qot_Common_4f25757a2b43f61e, []int{6}
}
func (m *SecurityStaticInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecurityStaticInfo.Unmarshal(m, b)
}
func (m *SecurityStaticInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecurityStaticInfo.Marshal(b, m, deterministic)
}
func (dst *SecurityStaticInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityStaticInfo.Merge(dst, src)
}
func (m *SecurityStaticInfo) XXX_Size() int {
	return xxx_messageInfo_SecurityStaticInfo.Size(m)
}
func (m *SecurityStaticInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityStaticInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityStaticInfo proto.InternalMessageInfo

func (m *SecurityStaticInfo) GetBasic() *SecurityStaticBasic {
	if m != nil {
		return m.Basic
	}
	return nil
}

func (m *SecurityStaticInfo) GetWarrantExData() *WarrantStaticExData {
	if m != nil {
		return m.WarrantExData
	}
	return nil
}

type Broker struct {
	Id                   *int64   `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Pos                  *int32   `protobuf:"varint,3,req,name=pos" json:"pos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Broker) Reset()         { *m = Broker{} }
func (m *Broker) String() string { return proto.CompactTextString(m) }
func (*Broker) ProtoMessage()    {}
func (*Broker) Descriptor() ([]byte, []int) {
	return fileDescriptor_Qot_Common_4f25757a2b43f61e, []int{7}
}
func (m *Broker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Broker.Unmarshal(m, b)
}
func (m *Broker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Broker.Marshal(b, m, deterministic)
}
func (dst *Broker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Broker.Merge(dst, src)
}
func (m *Broker) XXX_Size() int {
	return xxx_messageInfo_Broker.Size(m)
}
func (m *Broker) XXX_DiscardUnknown() {
	xxx_messageInfo_Broker.DiscardUnknown(m)
}

var xxx_messageInfo_Broker proto.InternalMessageInfo

func (m *Broker) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Broker) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Broker) GetPos() int32 {
	if m != nil && m.Pos != nil {
		return *m.Pos
	}
	return 0
}

type Ticker struct {
	Time                 *string  `protobuf:"bytes,1,req,name=time" json:"time,omitempty"`
	Sequence             *int64   `protobuf:"varint,2,req,name=sequence" json:"sequence,omitempty"`
	Dir                  *int32   `protobuf:"varint,3,req,name=dir" json:"dir,omitempty"`
	Price                *float64 `protobuf:"fixed64,4,req,name=price" json:"price,omitempty"`
	Volume               *int64   `protobuf:"varint,5,req,name=volume" json:"volume,omitempty"`
	Turnover             *float64 `protobuf:"fixed64,6,req,name=turnover" json:"turnover,omitempty"`
	RecvTime             *float64 `protobuf:"fixed64,7,opt,name=recvTime" json:"recvTime,omitempty"`
	Type                 *int32   `protobuf:"varint,8,opt,name=type" json:"type,omitempty"`
	TypeSign             *int32   `protobuf:"varint,9,opt,name=typeSign" json:"typeSign,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ticker) Reset()         { *m = Ticker{} }
func (m *Ticker) String() string { return proto.CompactTextString(m) }
func (*Ticker) ProtoMessage()    {}
func (*Ticker) Descriptor() ([]byte, []int) {
	return fileDescriptor_Qot_Common_4f25757a2b43f61e, []int{8}
}
func (m *Ticker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ticker.Unmarshal(m, b)
}
func (m *Ticker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ticker.Marshal(b, m, deterministic)
}
func (dst *Ticker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ticker.Merge(dst, src)
}
func (m *Ticker) XXX_Size() int {
	return xxx_messageInfo_Ticker.Size(m)
}
func (m *Ticker) XXX_DiscardUnknown() {
	xxx_messageInfo_Ticker.DiscardUnknown(m)
}

var xxx_messageInfo_Ticker proto.InternalMessageInfo

func (m *Ticker) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *Ticker) GetSequence() int64 {
	if m != nil && m.Sequence != nil {
		return *m.Sequence
	}
	return 0
}

func (m *Ticker) GetDir() int32 {
	if m != nil && m.Dir != nil {
		return *m.Dir
	}
	return 0
}

func (m *Ticker) GetPrice() float64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *Ticker) GetVolume() int64 {
	if m != nil && m.Volume != nil {
		return *m.Volume
	}
	return 0
}

func (m *Ticker) GetTurnover() float64 {
	if m != nil && m.Turnover != nil {
		return *m.Turnover
	}
	return 0
}

func (m *Ticker) GetRecvTime() float64 {
	if m != nil && m.RecvTime != nil {
		return *m.RecvTime
	}
	return 0
}

func (m *Ticker) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *Ticker) GetTypeSign() int32 {
	if m != nil && m.TypeSign != nil {
		return *m.TypeSign
	}
	return 0
}

type OrderBook struct {
	Price                *float64 `protobuf:"fixed64,1,req,name=price" json:"price,omitempty"`
	Volume               *int64   `protobuf:"varint,2,req,name=volume" json:"volume,omitempty"`
	OrederCount          *int32   `protobuf:"varint,3,req,name=orederCount" json:"orederCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderBook) Reset()         { *m = OrderBook{} }
func (m *OrderBook) String() string { return proto.CompactTextString(m) }
func (*OrderBook) ProtoMessage()    {}
func (*OrderBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_Qot_Common_4f25757a2b43f61e, []int{9}
}
func (m *OrderBook) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderBook.Unmarshal(m, b)
}
func (m *OrderBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderBook.Marshal(b, m, deterministic)
}
func (dst *OrderBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBook.Merge(dst, src)
}
func (m *OrderBook) XXX_Size() int {
	return xxx_messageInfo_OrderBook.Size(m)
}
func (m *OrderBook) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBook.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBook proto.InternalMessageInfo

func (m *OrderBook) GetPrice() float64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *OrderBook) GetVolume() int64 {
	if m != nil && m.Volume != nil {
		return *m.Volume
	}
	return 0
}

func (m *OrderBook) GetOrederCount() int32 {
	if m != nil && m.OrederCount != nil {
		return *m.OrederCount
	}
	return 0
}

type SubInfo struct {
	SubType              *int32      `protobuf:"varint,1,req,name=subType" json:"subType,omitempty"`
	SecurityList         []*Security `protobuf:"bytes,2,rep,name=securityList" json:"securityList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SubInfo) Reset()         { *m = SubInfo{} }
func (m *SubInfo) String() string { return proto.CompactTextString(m) }
func (*SubInfo) ProtoMessage()    {}
func (*SubInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_Qot_Common_4f25757a2b43f61e, []int{10}
}
func (m *SubInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubInfo.Unmarshal(m, b)
}
func (m *SubInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubInfo.Marshal(b, m, deterministic)
}
func (dst *SubInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubInfo.Merge(dst, src)
}
func (m *SubInfo) XXX_Size() int {
	return xxx_messageInfo_SubInfo.Size(m)
}
func (m *SubInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SubInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SubInfo proto.InternalMessageInfo

func (m *SubInfo) GetSubType() int32 {
	if m != nil && m.SubType != nil {
		return *m.SubType
	}
	return 0
}

func (m *SubInfo) GetSecurityList() []*Security {
	if m != nil {
		return m.SecurityList
	}
	return nil
}

type ConnSubInfo struct {
	SubInfoList          []*SubInfo `protobuf:"bytes,1,rep,name=subInfoList" json:"subInfoList,omitempty"`
	UsedQuota            *int32     `protobuf:"varint,2,req,name=usedQuota" json:"usedQuota,omitempty"`
	IsOwnConnData        *bool      `protobuf:"varint,3,req,name=isOwnConnData" json:"isOwnConnData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ConnSubInfo) Reset()         { *m = ConnSubInfo{} }
func (m *ConnSubInfo) String() string { return proto.CompactTextString(m) }
func (*ConnSubInfo) ProtoMessage()    {}
func (*ConnSubInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_Qot_Common_4f25757a2b43f61e, []int{11}
}
func (m *ConnSubInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnSubInfo.Unmarshal(m, b)
}
func (m *ConnSubInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnSubInfo.Marshal(b, m, deterministic)
}
func (dst *ConnSubInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnSubInfo.Merge(dst, src)
}
func (m *ConnSubInfo) XXX_Size() int {
	return xxx_messageInfo_ConnSubInfo.Size(m)
}
func (m *ConnSubInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnSubInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConnSubInfo proto.InternalMessageInfo

func (m *ConnSubInfo) GetSubInfoList() []*SubInfo {
	if m != nil {
		return m.SubInfoList
	}
	return nil
}

func (m *ConnSubInfo) GetUsedQuota() int32 {
	if m != nil && m.UsedQuota != nil {
		return *m.UsedQuota
	}
	return 0
}

func (m *ConnSubInfo) GetIsOwnConnData() bool {
	if m != nil && m.IsOwnConnData != nil {
		return *m.IsOwnConnData
	}
	return false
}

func init() {
	proto.RegisterType((*Security)(nil), "Qot_Common.Security")
	proto.RegisterType((*KLine)(nil), "Qot_Common.KLine")
	proto.RegisterType((*BasicQot)(nil), "Qot_Common.BasicQot")
	proto.RegisterType((*TimeShare)(nil), "Qot_Common.TimeShare")
	proto.RegisterType((*SecurityStaticBasic)(nil), "Qot_Common.SecurityStaticBasic")
	proto.RegisterType((*WarrantStaticExData)(nil), "Qot_Common.WarrantStaticExData")
	proto.RegisterType((*SecurityStaticInfo)(nil), "Qot_Common.SecurityStaticInfo")
	proto.RegisterType((*Broker)(nil), "Qot_Common.Broker")
	proto.RegisterType((*Ticker)(nil), "Qot_Common.Ticker")
	proto.RegisterType((*OrderBook)(nil), "Qot_Common.OrderBook")
	proto.RegisterType((*SubInfo)(nil), "Qot_Common.SubInfo")
	proto.RegisterType((*ConnSubInfo)(nil), "Qot_Common.ConnSubInfo")
	proto.RegisterEnum("Qot_Common.QotMarket", QotMarket_name, QotMarket_value)
	proto.RegisterEnum("Qot_Common.SecurityType", SecurityType_name, SecurityType_value)
	proto.RegisterEnum("Qot_Common.PlateSetType", PlateSetType_name, PlateSetType_value)
	proto.RegisterEnum("Qot_Common.WarrantType", WarrantType_name, WarrantType_value)
	proto.RegisterEnum("Qot_Common.QotMarketState", QotMarketState_name, QotMarketState_value)
	proto.RegisterEnum("Qot_Common.RehabType", RehabType_name, RehabType_value)
	proto.RegisterEnum("Qot_Common.KLType", KLType_name, KLType_value)
	proto.RegisterEnum("Qot_Common.KLFields", KLFields_name, KLFields_value)
	proto.RegisterEnum("Qot_Common.SubType", SubType_name, SubType_value)
	proto.RegisterEnum("Qot_Common.TickerDirection", TickerDirection_name, TickerDirection_value)
	proto.RegisterEnum("Qot_Common.TickerType", TickerType_name, TickerType_value)
	proto.RegisterEnum("Qot_Common.DarkStatus", DarkStatus_name, DarkStatus_value)
}

func init() {
	proto.RegisterFile("Qot_Common/Qot_Common.proto", fileDescriptor_Qot_Common_4f25757a2b43f61e)
}

var fileDescriptor_Qot_Common_4f25757a2b43f61e = []byte{
	// 2063 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0x4b, 0x73, 0x1b, 0xb9,
	0xf1, 0xdf, 0x19, 0x3e, 0x44, 0x36, 0x29, 0x0a, 0x02, 0x25, 0x99, 0xa6, 0x5f, 0x5c, 0xee, 0xfe,
	0xf7, 0xaf, 0xe2, 0x61, 0xb3, 0x5e, 0x97, 0x37, 0x39, 0xa5, 0x62, 0x52, 0x72, 0xd9, 0x65, 0x3d,
	0x87, 0x74, 0x5c, 0x49, 0x2a, 0xa5, 0x1a, 0x73, 0x60, 0x72, 0x8a, 0x23, 0x80, 0x8b, 0xc1, 0x48,
	0x56, 0xaa, 0xb6, 0xca, 0x39, 0x25, 0xe7, 0x7c, 0x9d, 0x1c, 0x93, 0xaf, 0xb1, 0x95, 0x9c, 0x73,
	0xc8, 0x2d, 0xf7, 0x14, 0x80, 0x79, 0x60, 0x86, 0xe4, 0x1e, 0x72, 0x9b, 0xfe, 0xf5, 0x03, 0x40,
	0xf7, 0xaf, 0x1b, 0x20, 0xe1, 0xc1, 0x25, 0x13, 0x57, 0x23, 0x76, 0x7d, 0xcd, 0xe8, 0xcf, 0xb2,
	0xcf, 0xaf, 0x97, 0x9c, 0x09, 0x86, 0x21, 0x43, 0xba, 0xed, 0xd8, 0xc8, 0x34, 0xe8, 0x7f, 0x07,
	0xb5, 0x31, 0x99, 0x46, 0xdc, 0x17, 0x77, 0xf8, 0x00, 0xaa, 0xd7, 0x2e, 0x5f, 0x10, 0xd1, 0xb1,
	0x7a, 0xf6, 0x61, 0xc5, 0x89, 0x25, 0x8c, 0xa1, 0x3c, 0x65, 0x1e, 0xe9, 0xd8, 0x3d, 0xfb, 0xb0,
	0xee, 0xa8, 0xef, 0xfe, 0x8f, 0x36, 0x54, 0xde, 0x9c, 0xf8, 0x94, 0x48, 0xad, 0xf0, 0xaf, 0x89,
	0xf2, 0xa9, 0x3b, 0xea, 0x1b, 0x77, 0x60, 0xcb, 0x0f, 0x87, 0x81, 0x4b, 0x17, 0xca, 0xa9, 0xe6,
	0x24, 0x22, 0x7e, 0x08, 0xf5, 0xb9, 0x3f, 0x9b, 0x5f, 0x70, 0x7f, 0x4a, 0x3a, 0xa5, 0x9e, 0x75,
	0x68, 0x39, 0x19, 0x20, 0xb5, 0x6c, 0x49, 0xa8, 0xd6, 0x96, 0xb5, 0x36, 0x05, 0x70, 0x17, 0x6a,
	0x01, 0xbb, 0xd5, 0xca, 0x8a, 0x52, 0xa6, 0x32, 0x7e, 0x0c, 0x30, 0x0d, 0x58, 0x48, 0xb4, 0xb6,
	0xaa, 0xb4, 0x06, 0x82, 0xbf, 0x82, 0x56, 0xe0, 0x86, 0x62, 0x94, 0xd9, 0x6c, 0x29, 0x9b, 0x02,
	0x2a, 0x73, 0x70, 0xc3, 0x82, 0xe8, 0x9a, 0x74, 0x6a, 0x3d, 0xeb, 0xb0, 0xe4, 0xc4, 0x92, 0x5c,
	0x5b, 0x44, 0x9c, 0xb2, 0x1b, 0xc2, 0x3b, 0x75, 0xbd, 0x76, 0x22, 0xe3, 0x3e, 0x34, 0x93, 0x6f,
	0xc7, 0x15, 0xa4, 0x03, 0x4a, 0x9f, 0xc3, 0x70, 0x0b, 0xec, 0x25, 0xe9, 0x34, 0x94, 0xc6, 0x5e,
	0xea, 0xfd, 0xce, 0x5d, 0x3a, 0x23, 0xca, 0xa3, 0x19, 0xef, 0x37, 0x45, 0xfa, 0xff, 0x2e, 0x41,
	0x6d, 0xe8, 0x86, 0xfe, 0xf4, 0x92, 0x09, 0xfc, 0x0d, 0xd4, 0xc2, 0xb8, 0x48, 0x2a, 0xcd, 0x8d,
	0x6f, 0xf7, 0xbe, 0x36, 0x4a, 0x9d, 0x14, 0xd0, 0x49, 0xad, 0x70, 0x0f, 0x1a, 0x7e, 0x38, 0x8e,
	0xc2, 0x25, 0xa1, 0x1e, 0xf1, 0xe2, 0x22, 0x98, 0x90, 0x4a, 0xa6, 0x1f, 0x8a, 0x89, 0x2c, 0x5d,
	0x49, 0x95, 0x2e, 0x95, 0xa5, 0xf7, 0x52, 0x66, 0x63, 0xbc, 0xe4, 0xc4, 0xf5, 0x3a, 0xe5, 0x9e,
	0x7d, 0x68, 0x39, 0x26, 0x24, 0xb7, 0x1f, 0x2d, 0x3d, 0x57, 0x10, 0xe5, 0x5f, 0x51, 0xfe, 0x06,
	0x92, 0x2f, 0x73, 0x55, 0xf9, 0x6f, 0x2a, 0xf3, 0x96, 0xd6, 0xae, 0x2f, 0x73, 0x4d, 0x29, 0xb3,
	0x32, 0x77, 0xa1, 0x36, 0x8d, 0xb8, 0xd6, 0xd5, 0xb5, 0x2e, 0x91, 0xd7, 0x94, 0x18, 0x94, 0xc5,
	0xe6, 0x12, 0x37, 0x7a, 0xf6, 0x86, 0x12, 0x37, 0x75, 0xec, 0x8d, 0x25, 0xde, 0x56, 0xfa, 0x7c,
	0x89, 0x1f, 0x42, 0xdd, 0xbd, 0x5e, 0x06, 0xbe, 0x88, 0x3c, 0xd2, 0x69, 0xe9, 0x53, 0xa5, 0x80,
	0xcc, 0x98, 0xe7, 0xf2, 0xc5, 0x58, 0xb8, 0x22, 0x0a, 0x3b, 0x3b, 0x3d, 0xeb, 0xb0, 0xe2, 0x18,
	0x48, 0xff, 0x1f, 0x16, 0xd4, 0x65, 0xea, 0xc6, 0x73, 0x97, 0xaf, 0x6f, 0x2a, 0xd9, 0x9e, 0x3e,
	0x8d, 0x84, 0x6e, 0x44, 0xd9, 0x9e, 0x4a, 0x32, 0x9b, 0xad, 0x94, 0x6f, 0xb6, 0x3d, 0xa8, 0x2c,
	0x8d, 0x56, 0xd2, 0xc2, 0x9a, 0x3c, 0x55, 0xd6, 0xb6, 0x42, 0x17, 0x6a, 0xee, 0xcd, 0xcc, 0x6c,
	0xa8, 0x54, 0x36, 0x72, 0xb8, 0xb5, 0xb1, 0x4d, 0x6a, 0xf9, 0x36, 0xe9, 0xff, 0xd5, 0x82, 0x76,
	0x42, 0x55, 0x79, 0x68, 0x7f, 0xaa, 0x08, 0xfe, 0x3f, 0xb0, 0xbb, 0x05, 0xb6, 0xaf, 0x49, 0x5d,
	0x72, 0x6c, 0xdf, 0x93, 0x19, 0x08, 0x98, 0x18, 0xfb, 0x7f, 0xd0, 0x54, 0xae, 0x38, 0x89, 0x28,
	0x35, 0x21, 0x99, 0x4e, 0xee, 0x96, 0x44, 0xb1, 0xb8, 0xe2, 0x24, 0xa2, 0xcc, 0x30, 0x75, 0x53,
	0xee, 0xaa, 0xef, 0x5c, 0x4f, 0x54, 0xf3, 0x3d, 0xd1, 0x7f, 0x0b, 0xed, 0x77, 0x2e, 0xe7, 0x2e,
	0x15, 0x7a, 0xef, 0xc7, 0x1f, 0x8f, 0x5c, 0xe1, 0xaa, 0x42, 0xc9, 0xe8, 0x7a, 0x62, 0xaa, 0x6f,
	0x3c, 0x80, 0x0a, 0xbb, 0xa5, 0x84, 0xab, 0x1d, 0x6e, 0x3a, 0x8d, 0x36, 0xe9, 0xff, 0xc5, 0x02,
	0x9c, 0x4f, 0xca, 0x6b, 0xfa, 0x81, 0xe1, 0xe7, 0x50, 0x79, 0x2f, 0x93, 0x13, 0x27, 0xe4, 0xc9,
	0xba, 0x10, 0x46, 0x0e, 0x1d, 0x6d, 0x8d, 0x8f, 0x61, 0xfb, 0x56, 0x6f, 0x52, 0x6f, 0xaf, 0x63,
	0xf7, 0xac, 0xa2, 0xfb, 0x9a, 0x53, 0x38, 0x79, 0xaf, 0xfe, 0x2f, 0xa1, 0x3a, 0xe4, 0x6c, 0x41,
	0x78, 0x9c, 0x69, 0x2b, 0xcd, 0x74, 0x92, 0x35, 0xdb, 0xc8, 0x1a, 0x82, 0xd2, 0x92, 0x85, 0x71,
	0xe6, 0xe5, 0x67, 0xff, 0x9f, 0x16, 0x54, 0x27, 0xfe, 0x54, 0x06, 0x58, 0x47, 0xe4, 0xae, 0x2c,
	0xf8, 0xf7, 0x11, 0xa1, 0x53, 0x12, 0x17, 0x31, 0x95, 0x65, 0x30, 0xcf, 0xe7, 0x49, 0x30, 0xcf,
	0xe7, 0x26, 0x89, 0xed, 0x8c, 0xc4, 0x19, 0x01, 0x2b, 0x1b, 0x9b, 0xb8, 0x5a, 0x68, 0xe2, 0x2e,
	0xd4, 0x38, 0x99, 0xde, 0xa8, 0xf2, 0xea, 0xe9, 0x9f, 0xca, 0x69, 0x1d, 0x6b, 0xaa, 0x31, 0x75,
	0x1d, 0x65, 0xac, 0xbb, 0x25, 0x19, 0xfb, 0x33, 0xaa, 0x66, 0x7e, 0xc5, 0x49, 0xe5, 0xfe, 0xef,
	0xa0, 0x7e, 0xce, 0x3d, 0xc2, 0x87, 0x8c, 0x19, 0x7d, 0x66, 0xad, 0xdf, 0xa2, 0x9d, 0xdb, 0x62,
	0x0f, 0x1a, 0x8c, 0x13, 0x8f, 0xf0, 0x11, 0x8b, 0xa8, 0x88, 0x8f, 0x6a, 0x42, 0xfd, 0xdf, 0xc3,
	0xd6, 0x38, 0x7a, 0xaf, 0x88, 0x20, 0x09, 0x1c, 0xbd, 0x9f, 0x64, 0x14, 0x4b, 0x44, 0xfc, 0x0b,
	0x68, 0x26, 0x0d, 0x71, 0xe2, 0x87, 0xa2, 0x63, 0xf7, 0x4a, 0x1b, 0xc9, 0x96, 0xb3, 0xec, 0xff,
	0xd9, 0x82, 0xc6, 0x88, 0x51, 0x9a, 0xac, 0xf1, 0x1c, 0x1a, 0xa1, 0xfe, 0x54, 0x81, 0x2c, 0x15,
	0xa8, 0x9d, 0x0b, 0xa4, 0xd5, 0x8e, 0x69, 0x27, 0xe7, 0x5d, 0x14, 0x12, 0xef, 0x32, 0x62, 0x8a,
	0x68, 0x72, 0x73, 0x19, 0x80, 0xbf, 0x84, 0x6d, 0x3f, 0x3c, 0xbf, 0xa5, 0x72, 0x21, 0x45, 0x45,
	0x3d, 0x9b, 0xf2, 0xe0, 0xe0, 0xef, 0x16, 0xd4, 0x2f, 0x99, 0x38, 0xd5, 0x0f, 0x8d, 0x7d, 0xd8,
	0x4d, 0x85, 0xab, 0xb7, 0x74, 0x41, 0xd9, 0x2d, 0x45, 0x9f, 0xe1, 0xfb, 0xb0, 0x9f, 0xc1, 0xaf,
	0xde, 0x5c, 0x25, 0xc7, 0x42, 0x16, 0xbe, 0x07, 0xed, 0x9c, 0xea, 0x65, 0x24, 0x22, 0x4e, 0x90,
	0x9d, 0xf7, 0x79, 0x3b, 0xce, 0x7c, 0x1a, 0x79, 0x9f, 0xb7, 0xe3, 0xab, 0xf3, 0xa5, 0xf0, 0x19,
	0x45, 0x4d, 0xfc, 0x00, 0xee, 0x65, 0x8a, 0xd1, 0xd9, 0xf8, 0x55, 0xe6, 0xb5, 0xbf, 0xa2, 0xfc,
	0x6d, 0xa6, 0x3c, 0x18, 0xfc, 0xd1, 0x86, 0x66, 0x22, 0xaa, 0xe2, 0x74, 0x60, 0xcf, 0x94, 0x8d,
	0xc3, 0xec, 0xc3, 0x6e, 0x4e, 0x33, 0x64, 0xd4, 0x43, 0xd6, 0x2a, 0x7c, 0xcb, 0x05, 0xb2, 0x57,
	0xe0, 0xe3, 0xef, 0xc5, 0x1d, 0x2a, 0xe1, 0x83, 0x6c, 0x68, 0x28, 0x78, 0xc2, 0xa3, 0x50, 0xa0,
	0xf2, 0xca, 0xb2, 0x71, 0xaf, 0xa3, 0xca, 0x8a, 0xc7, 0x6b, 0xea, 0x91, 0x8f, 0xa8, 0xba, 0x82,
	0x5f, 0x04, 0xae, 0x20, 0x68, 0x6b, 0x65, 0xe1, 0x23, 0x7e, 0x23, 0x50, 0x4d, 0xa6, 0x75, 0xd5,
	0x7c, 0x4c, 0x04, 0xaa, 0x0f, 0x38, 0x34, 0x13, 0x49, 0xa5, 0x60, 0x0f, 0x90, 0x29, 0x5f, 0xbd,
	0x08, 0x02, 0x5d, 0xcb, 0x1c, 0xfa, 0x9a, 0x7a, 0x51, 0x28, 0x78, 0x5c, 0xcb, 0x9c, 0xca, 0x21,
	0x33, 0x59, 0x17, 0x5b, 0x9e, 0x2a, 0xa7, 0x18, 0x31, 0x3a, 0x25, 0x4b, 0x81, 0x4a, 0x83, 0x1f,
	0xa0, 0x11, 0x1f, 0x51, 0x2d, 0x79, 0x2f, 0x9d, 0xd1, 0x85, 0xa4, 0xb7, 0x61, 0xc7, 0x54, 0x0c,
	0x23, 0xb9, 0xde, 0x1e, 0x20, 0x13, 0x1c, 0x93, 0x20, 0x40, 0x76, 0x11, 0x1d, 0x46, 0x41, 0x80,
	0x4a, 0x2b, 0x28, 0x71, 0x39, 0x2a, 0x0f, 0xfe, 0x56, 0x86, 0x56, 0x4a, 0x0a, 0x39, 0x50, 0x49,
	0x8e, 0x5c, 0x0a, 0xb9, 0x3a, 0x63, 0x94, 0xa0, 0xcf, 0x70, 0x17, 0x0e, 0x0a, 0x8a, 0x17, 0xd1,
	0x54, 0x11, 0xcf, 0xc2, 0x8f, 0xa1, 0x5b, 0xd0, 0xbd, 0x73, 0x7d, 0xe1, 0xd3, 0xd9, 0xf9, 0x92,
	0xc8, 0x04, 0xac, 0xfa, 0x9e, 0x32, 0x4e, 0x7d, 0x3a, 0x43, 0xa5, 0x35, 0x0b, 0x3a, 0x44, 0x71,
	0xe1, 0x21, 0x74, 0x8a, 0x0b, 0x7e, 0x10, 0x84, 0x53, 0xc6, 0x28, 0xaa, 0xe4, 0xfa, 0x43, 0x6b,
	0xd5, 0xcd, 0xef, 0xa1, 0x2a, 0xfe, 0x1c, 0x1e, 0x15, 0x54, 0x17, 0x9c, 0x68, 0x71, 0x48, 0x66,
	0x3e, 0x45, 0x35, 0xfc, 0x44, 0xfd, 0xea, 0x58, 0x6b, 0x72, 0x4c, 0x3d, 0x54, 0xc7, 0x7d, 0x78,
	0xbc, 0x6e, 0xf1, 0x57, 0x2c, 0xe2, 0xa1, 0x0e, 0x02, 0xb8, 0x07, 0x0f, 0x37, 0xda, 0xc8, 0x28,
	0x8d, 0x35, 0x47, 0x38, 0xf3, 0x67, 0x73, 0xa1, 0xb2, 0xb2, 0x9d, 0xeb, 0x48, 0x43, 0x2b, 0x5d,
	0x5b, 0x6b, 0x82, 0xeb, 0xd1, 0x70, 0xe4, 0xde, 0x29, 0xf7, 0x9d, 0x35, 0xc7, 0x4c, 0x2d, 0x86,
	0x9c, 0xb8, 0x0b, 0x84, 0x7e, 0xca, 0x44, 0x65, 0x0b, 0xed, 0xe2, 0xff, 0x87, 0x2f, 0x36, 0x99,
	0xc8, 0x1a, 0xbe, 0x64, 0x5c, 0x2d, 0x87, 0x25, 0x89, 0x0b, 0x86, 0xaf, 0x16, 0x23, 0x37, 0x44,
	0xed, 0xc1, 0x19, 0xd4, 0x1d, 0x32, 0x77, 0xdf, 0xc7, 0xcf, 0x92, 0x56, 0x2a, 0x24, 0xd4, 0xd9,
	0x87, 0xdd, 0x0c, 0x7b, 0xc9, 0xf8, 0xad, 0xcb, 0xe5, 0xc8, 0x38, 0x00, 0x9c, 0xc1, 0x43, 0x77,
	0xba, 0x50, 0xb8, 0x3d, 0xf8, 0xd1, 0x82, 0xea, 0x9b, 0x93, 0x24, 0x9a, 0xfe, 0x32, 0x7a, 0x61,
	0x07, 0x1a, 0x31, 0xf6, 0xf4, 0xd4, 0x97, 0xec, 0x6b, 0x01, 0xc4, 0xc0, 0x91, 0x7b, 0x87, 0x6c,
	0xc3, 0xe0, 0x1d, 0x21, 0x0b, 0x54, 0xc2, 0x08, 0x9a, 0x31, 0x70, 0xca, 0xa8, 0x98, 0xa3, 0xb2,
	0x61, 0xf2, 0x1b, 0xd9, 0x09, 0x15, 0x03, 0x78, 0x2e, 0x83, 0x56, 0x0d, 0x9f, 0xa7, 0x0a, 0xd9,
	0x32, 0x90, 0x67, 0xdf, 0x9c, 0x2a, 0x16, 0x65, 0xc8, 0x77, 0x0a, 0xa9, 0x1b, 0x61, 0x9e, 0x9d,
	0x2a, 0x8e, 0x64, 0x07, 0xb8, 0x8c, 0x5c, 0x2e, 0x08, 0x47, 0x8d, 0xc1, 0x7f, 0x2c, 0xa8, 0xbd,
	0x39, 0x79, 0xe9, 0x93, 0xc0, 0x0b, 0xf1, 0x2e, 0x6c, 0x27, 0xdf, 0x49, 0xba, 0x4c, 0xe8, 0x95,
	0x3f, 0x9b, 0x23, 0x2b, 0x07, 0xc5, 0x3d, 0xa5, 0x16, 0x8f, 0xa1, 0x13, 0x76, 0x8b, 0xca, 0x7a,
	0xad, 0x18, 0xd1, 0xe5, 0xad, 0xc9, 0x1c, 0x67, 0x56, 0xc9, 0xf3, 0x18, 0x21, 0x39, 0x50, 0x52,
	0xfc, 0xd7, 0xea, 0x5a, 0x47, 0x3d, 0x59, 0xa7, 0x14, 0x9c, 0xc4, 0x8f, 0x0e, 0xf4, 0x2b, 0xdc,
	0x85, 0xfd, 0x15, 0x58, 0xfe, 0x60, 0x40, 0x9f, 0x2c, 0x8c, 0xe4, 0x81, 0x63, 0xdd, 0xc5, 0x31,
	0xfa, 0x24, 0x87, 0x5d, 0x3b, 0xdb, 0x45, 0xfa, 0x7b, 0x10, 0x7d, 0x2a, 0x0f, 0xfe, 0x65, 0xab,
	0x67, 0x81, 0x2a, 0x2c, 0x82, 0x66, 0xfc, 0x69, 0x9c, 0x3a, 0x41, 0xd4, 0x93, 0x30, 0xbe, 0x53,
	0x62, 0x28, 0x7d, 0xab, 0x20, 0x5b, 0x9e, 0x33, 0x81, 0xf5, 0x23, 0x0d, 0x95, 0x25, 0x07, 0x12,
	0xcc, 0x99, 0xa0, 0x8a, 0x69, 0xf3, 0xe6, 0x44, 0xf1, 0xa2, 0x2a, 0xcf, 0x6c, 0x60, 0x71, 0x55,
	0xf7, 0x00, 0x19, 0xa0, 0xae, 0x75, 0xad, 0x80, 0x3e, 0x8b, 0xab, 0x9b, 0x47, 0x75, 0xcd, 0xa1,
	0x10, 0x56, 0x71, 0xb2, 0x51, 0x00, 0x15, 0x0f, 0x9b, 0x05, 0x7f, 0xcd, 0xc5, 0x6d, 0x73, 0xab,
	0xfa, 0xd1, 0x8a, 0x5a, 0xea, 0x56, 0xcb, 0x2c, 0x2f, 0x23, 0xee, 0x4a, 0xea, 0xec, 0x14, 0xc2,
	0x2a, 0xee, 0xa2, 0x02, 0xa8, 0x88, 0xb7, 0x3b, 0xf8, 0x01, 0x76, 0x74, 0x72, 0x8e, 0x7c, 0x4e,
	0xd4, 0x9c, 0x96, 0xf3, 0xa6, 0x00, 0x19, 0x5d, 0x75, 0x0f, 0xda, 0x45, 0xe5, 0xd0, 0xf7, 0xf4,
	0xad, 0x56, 0x54, 0xbc, 0x08, 0x65, 0x19, 0xd6, 0x84, 0x3b, 0x23, 0x91, 0xe0, 0x6e, 0x80, 0x4a,
	0x83, 0x3f, 0x6d, 0x01, 0x68, 0xad, 0x2a, 0xf7, 0x01, 0xe0, 0x4c, 0x32, 0x56, 0xed, 0xc0, 0x9e,
	0x81, 0xbf, 0x88, 0x04, 0xbb, 0x76, 0xc5, 0x54, 0x32, 0xbe, 0x9d, 0xec, 0x5f, 0x69, 0x4e, 0x24,
	0x85, 0x6c, 0x39, 0x4f, 0x0d, 0x50, 0x12, 0x27, 0x73, 0x29, 0xe1, 0x47, 0x70, 0xdf, 0xd0, 0xbe,
	0xa6, 0x82, 0xf0, 0x4c, 0x5d, 0x96, 0xc3, 0xb0, 0xa8, 0xce, 0x47, 0xa8, 0x48, 0xc2, 0x19, 0x26,
	0xe7, 0x9e, 0x77, 0xc2, 0x84, 0x7e, 0x63, 0xe4, 0x76, 0xa9, 0xaf, 0xbd, 0xad, 0xc2, 0x1e, 0x87,
	0x51, 0xb0, 0xd0, 0xd4, 0x31, 0xc0, 0x11, 0x77, 0xc3, 0x39, 0xaa, 0xcb, 0x1b, 0x30, 0x87, 0xb2,
	0x30, 0xd4, 0xa3, 0x14, 0x41, 0x96, 0xe1, 0x34, 0xcc, 0x98, 0x05, 0xf2, 0xfa, 0xc8, 0x3b, 0xbd,
	0xe4, 0x84, 0x9c, 0xd3, 0x21, 0x93, 0x43, 0xb2, 0x99, 0x65, 0x5f, 0x73, 0x3e, 0x0a, 0xc8, 0xd3,
	0x6f, 0x7f, 0x7e, 0xce, 0x9f, 0x3e, 0x7f, 0x8e, 0xb6, 0x0b, 0x7b, 0x38, 0x22, 0x81, 0x7b, 0x87,
	0x5a, 0xf8, 0xff, 0xe0, 0x73, 0x03, 0xd5, 0xcb, 0x8f, 0x88, 0xcc, 0x43, 0xf6, 0xa3, 0x19, 0xed,
	0x14, 0x4e, 0x7b, 0x46, 0x3e, 0x0a, 0xd9, 0x3e, 0x48, 0x5e, 0x89, 0x1b, 0xdc, 0xe5, 0x44, 0x92,
	0x97, 0xf9, 0x6e, 0xc1, 0xe6, 0x82, 0xfb, 0x8c, 0x3b, 0xe4, 0x03, 0xe1, 0xf2, 0xa7, 0x91, 0x8e,
	0x8f, 0xf1, 0x97, 0xd0, 0xfb, 0x89, 0x38, 0xda, 0xaa, 0x5d, 0x28, 0x85, 0x7c, 0xdb, 0x10, 0x8e,
	0xf6, 0xe4, 0xdc, 0x30, 0xe0, 0x09, 0xda, 0xc7, 0x5f, 0xc0, 0x13, 0x03, 0x39, 0xfe, 0x28, 0xd4,
	0xdf, 0x43, 0x13, 0xee, 0x7a, 0x3e, 0x9d, 0xa9, 0xbb, 0x18, 0x1d, 0xc8, 0xd7, 0x82, 0x99, 0x7e,
	0x46, 0xe5, 0xe3, 0x84, 0x50, 0x81, 0xee, 0x15, 0x12, 0xf9, 0xe2, 0x86, 0x70, 0x77, 0x16, 0xef,
	0xb5, 0x53, 0xc8, 0xc5, 0xf9, 0x64, 0xa4, 0x2a, 0x73, 0x5f, 0xde, 0xce, 0x2b, 0x44, 0x31, 0x8b,
	0xda, 0x2d, 0xb0, 0xed, 0x88, 0x70, 0xff, 0xc6, 0x15, 0xfe, 0x0d, 0x09, 0xee, 0x54, 0x6c, 0x0f,
	0x3d, 0x90, 0xaf, 0x26, 0xb3, 0x84, 0x24, 0x4e, 0x63, 0xac, 0x7f, 0x58, 0x60, 0xbb, 0xac, 0x51,
	0xa6, 0x7d, 0x84, 0xbf, 0x82, 0x7e, 0xee, 0x48, 0xd7, 0x4b, 0x4e, 0xe6, 0x84, 0x86, 0xfe, 0x0d,
	0x51, 0x05, 0xd7, 0x47, 0x78, 0x3c, 0x38, 0x05, 0x38, 0x4a, 0xff, 0xa5, 0x91, 0x94, 0xcd, 0xa4,
	0x64, 0xf4, 0x1e, 0x00, 0x36, 0xc0, 0x38, 0x75, 0xc8, 0x92, 0x93, 0xc9, 0xc0, 0xe5, 0xbb, 0xc4,
	0xfe, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xe6, 0x6b, 0x56, 0xae, 0x15, 0x00, 0x00,
}
